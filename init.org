#+TITLE: Emacs configuration file
#+AUTHOR: Zackary Crosley
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* Configuration

** Set Personal Info

    #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Zackary Crosley")
    #+END_SRC

** Package Management

    Some basic packages are required.

    #+BEGIN_SRC emacs-lisp
    ; (require 'cl)
    (require 'package)
    (package-initialize)
    #+END_SRC

    Melpa has a large repository of the most popular packages.

    #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
    #+END_SRC

    The package =use-package= is great for managing packages. It's also nice to
    ensure used packages are installed.

    #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)
    #+END_SRC

** Meta

    The following configuration found initially in =init.el= enables the
    automatic bootstrapping process.

    #+BEGIN_SRC emacs-lisp :tangle no
    ;; This file replaces itself with the actual configuration at first run.
    (require 'org)
    (find-file (concat user-emacs-directory "init.org"))
    (org-babel-tangle)
    (load-file (concat user-emacs-directory "init.el"))
    (byte-compile-file (concat user-emacs-directory "init.el"))
    #+END_SRC

    Automatically recompile =init.el= when =init.org= is changed, on save.

    #+BEGIN_SRC emacs-lisp
    (defun tangle-init ()
       (when (equal (buffer-file-name)
          (expand-file-name (concat user-emacs-directory "init.org")))
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
             (org-babel-tangle)
             (byte-compile-file (concat user-emacs-directory "init.el")))))
    (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

** Custom Packages

*** Helm

    #+BEGIN_SRC emacs-lisp
    (use-package helm
       :ensure t
       :bind (("M-x" . helm-M-x)
              ("C-x C-f" . helm-find-files)
              ("C-x b" . helm-buffers-list)
              ("C-x C-b" . helm-filtered-bookmarks))
       :config
       (helm-autoresize-mode t))
    #+END_SRC

*** Flycheck

    Better syntax highlighting like a modern IDE.

    #+BEGIN_SRC emacs-lisp
    (use-package flycheck
       :ensure t
       :config
       (progn
           (setq flycheck-emacs-lisp-initialize-packages 'auto
                 flycheck-check-syntax-automatically '(save new-line))
           (add-hook 'after-init-hook 'global-flycheck-mode)))
    #+END_SRC

*** Company Mode

    Add autocompletion for all nodes.

    #+BEGIN_SRC emacs-lisp
    (use-package company
       :ensure t
       :diminish company-mode
       :config
       (add-hook 'after-init-hook 'global-company-mode))
    #+END_SRC

*** Projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
       :ensure t
       :init
       (setq projectile-enable-caching t)
       :config
       (projectile-mode))
  #+END_SRC

*** Magit Status

  #+BEGIN_SRC emacs-lisp
    (use-package magit
       :ensure t
       :bind ("C-x g" . magit-status))
  #+END_SRC

*** Python

**** Elpy

    #+BEGIN_SRC emacs-lisp
    (use-package elpy
       :ensure t
       :config
       (elpy-enable)
       (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt")
       (pyvenv-workon "+")
       (setq elpy-modules
          '(elpy-module-sane-defaults
             elpy-module-company
             elpy-module-eldoc
             elpy-module-pyvenv
             elpy-module-yasnippet
             elpy-module-django)))
    #+END_SRC

*** Clojure

**** Clojure-Mode

     #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode
        :ensure t
        :mode (("\\.clj\\'" . clojure-mode)
               ("\\.edn\\'" . clojure-mode)))
     #+END_SRC

**** Cider

     #+BEGIN_SRC emacs-lisp
     (use-package cider
        :ensure t
        :defer t
        :after (clojure-mode)
        :config
        (setq nrepl-log-messages t)
        :bind ("C-c C-c" . cider-jack-in))
     #+END_SRC

*** YAML

    #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
        :ensure t
        :mode (("\\.yaml\\'" . yaml-mode)
               ("\\.yml'" . yaml-mode)))
    #+END_SRC

*** AUCTex

    #+BEGIN_SRC emacs-lisp
    ;(use-package tex
    ;   :defer t
    ;   :ensure auctex
    ;   :config
    ;   (setq TeX-auto-save t))
    #+END_SRC

*** Dockerfile Mode

    Syntax highilighting and building from Emacs.

    #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
       :ensure t
       :mode ("Dockerfile\\'" . dockerfile-mode))
    #+END_SRC

*** Buffer Move

    Exchange buffers between split windows faster. Bound to C-w e-? for Window - Exchange.

    #+BEGIN_SRC emacs-lisp
    (use-package buffer-move
       :ensure t)
       ;:bind (("C-w e k" . buf-move-up)
              ;("C-w e j" . buf-move-down)
              ;("C-w e h" . buf-move-left)
              ;("C-w e l" . buf-move-right)))
    #+END_SRC

** Evil.

*** Setup evil mode because VIM bindings are better.

    #+BEGIN_SRC emacs-lisp
    (use-package evil
       :ensure t
       :config
       (evil-mode t))
    #+END_SRC

*** Evil Maps

    More evil mappings for moving between panes, etc.

    #+BEGIN_SRC emacs-lisp
      (use-package evil-maps
         :ensure t
         :config
         (progn
            (define-key evil-motion-state-map "\C-v" nil)
            (define-key evil-window-map (kbd "H") 'buf-move-left)
            (define-key evil-window-map (kbd "J") 'buf-move-down)
            (define-key evil-window-map (kbd "K") 'buf-move-up)
            (define-key evil-window-map (kbd "L") 'buf-move-right)))
    #+END_SRC

*** Evil Leader

    For fast keyboard shortcuts for common commands.

    #+BEGIN_SRC emacs-lisp
    (use-package evil-leader
       :ensure t
       :init
       (global-evil-leader-mode)
       :after (evil)
       :config
       (evil-leader/set-key
          "k" 'kill-buffer
          "g" 'magit-status
          "<up>" 'evil-numbers/inc-at-pt
          "<down>" 'evil-numbers/dec-at-pt
          "<left>" 'evil-window-left
          "<right>" 'evil-window-right)
       (evil-leader/set-leader "<SPC>"))
    #+END_SRC

*** Evil Commentary

    #+BEGIN_SRC emacs-lisp
    (use-package evil-commentary
       :ensure t
       :after (evil)
       :config
       (evil-commentary-mode))
    #+END_SRC

*** Evil Surround

    Vim commands for dealing with surrounding characters.

    #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
       :ensure t
       :after (evil)
       :init
       (global-evil-surround-mode t))
    #+END_SRC

*** Relative Line Numbers

    Relative line numbering for easy navigation with vim shortcuts.

    #+BEGIN_SRC emacs-lisp
    (use-package linum-relative
       :ensure t
       :after (evil)
       :config
       (linum-relative-mode))
    #+END_SRC

*** Vimish Fold

    For folding code, making it easier to navigate.

    #+BEGIN_SRC emacs-lisp
    (use-package vimish-fold
       :ensure t
       :after (evil)
       :config
       (vimish-fold-mode 1))
    #+END_SRC

** Sane Defaults

   Use default customization values that are more sane.

   #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t     ; No splash screen
       initial-scratch-message nil      ; Clean scratch buffer
       echo-keystrokes 0.1              ; Show keystrokes asap
       auto-revert-interval 1           ; Refresh buffers fast
       custom-file (make-temp-file "")  ; Discard customization's
       dired-dwim-target t              ; Make dired more intelligent
       default-input-method "TeX"       ; Use TeX when toggling input method
       ring-bell-function 'ignore       ; Quiet
       sentence-end-double-space nil)   ; No double space
   #+END_SRC

   Use standard keys to zoom in and out.

   #+BEGIN_SRC emacs-lisp
   (define-key global-map (kbd "C-=") 'text-scale-increase)
   (define-key global-map (kbd "C--") 'text-scale-decrease)
   (global-set-key (kbd "C-x O") (lambda ()
                                (interactive)
                                (other-window -1 t)))
   #+END_SRC

   Always match braces / paranthesis / brackets.

   #+BEGIN_SRC emacs-lisp
   (electric-pair-mode 1)
   #+END_SRC

   Some customizations must be done with =setq-default= because they are
   buffer-local.

   #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil  ; Use spaces instead of tabs
       split-width-threshold 160        ; Split vertically by default
       split-height-threshold nil)      ; Split vertically by default
   #+END_SRC

   Show line numbers by default.

   #+BEGIN_SRC emacs-lisp
    (global-linum-mode 1)
    (set-face-foreground 'linum "#999")
   #+END_SRC

   Disable some of the default modes that aren't very useful.

   #+BEGIN_SRC emacs-lisp
    (dolist (mode
       '(tool-bar-mode                ; No toolbars
          menu-bar-mode                ; No menu bar
          scroll-bar-mode              ; No scroll bars
          blink-cursor-mode))          ; No blinking cursor
       (funcall mode 0))
   #+END_SRC

   Enable modes that are disabled by default.

   #+BEGIN_SRC emacs-lisp
    (dolist (mode
       '(column-number-mode       ; Show column number in mode line
          delete-selection-mode   ; Replace selected text
          show-paren-mode         ; Highlight matching parentheses
          ; which-key-mode        ; Available keybindings in popup
          winner-mode))           ; Allow undo/redo on window operations
       (funcall mode 1))
   #+END_SRC

   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
    (set-language-environment "UTF-8")
   #+END_SRC

   Yes/no is so verbose. Answer questions with y/n.

   #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Don't allow trailing whitespace to end up in a saved file.

   #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Visual

   Prettier, more configurable status bar.

   #+BEGIN_SRC emacs-lisp
    (use-package powerline
       :ensure t
       :config
       (add-hook 'after-init-hook 'powerline-center-evil-theme))
   #+END_SRC

   Set the default font.

   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil
      :family "Source Code Pro"
      :height 140
      :weight 'normal
      :width 'normal)
   #+END_SRC

   Use a Nord theme.

   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
      :ensure t
      :preface
      (defvar region-fg nil)
      :config
      (load-theme 'doom-nord t)
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))
   #+END_SRC
