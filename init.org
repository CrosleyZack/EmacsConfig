#+TITLE: Emacs configuration file
#+AUTHOR: Zackary Crosley
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* Build Instructions

1. Clone repo into ~/.emacs.d
2. In emacs, run =M-x org-babel-load-file=
3. Remove ~/.emacs if it exists

* Configuration

** Set Personal Info

    #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Zackary Crosley")
    #+END_SRC

** Package Management

    Some basic packages are required.

    #+BEGIN_SRC emacs-lisp
    (require 'package)
    (package-initialize)
    #+END_SRC

    Melpa has a large repository of the most popular packages.

    #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
    #+END_SRC

    Add =use-package= to manage all further packages.

    #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)
    #+END_SRC

    Add bind-key as a necessary component for use-package

    #+BEGIN_SRC emacs-lisp
    (require 'bind-key)
    #+END_SRC

** Meta

    The following configuration found initially in =init.el= enables the automatic bootstrapping process.

    #+BEGIN_SRC emacs-lisp :tangle no
    ;; This file replaces itself with the actual configuration at first run.
    (require 'org)
    (find-file (concat user-emacs-directory "init.org"))
    (org-babel-tangle)
    (load-file (concat user-emacs-directory "init.el"))
    (byte-compile-file (concat user-emacs-directory "init.el"))
    #+END_SRC

    Automatically recompile =init.el= when =init.org= is changed, on save.

    #+BEGIN_SRC emacs-lisp
    (defun tangle-init ()
       (when (equal (buffer-file-name)
          (expand-file-name (concat user-emacs-directory "init.org")))
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
             (org-babel-tangle)
             (byte-compile-file (concat user-emacs-directory "init.el")))))
    (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

** Custom Packages

*** General Code Tools

**** Flycheck

    Better syntax highlighting like a modern IDE.

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
         :ensure t
         :hook (prog-mode . flycheck-mode)
         :config
         (setq flycheck-emacs-lisp-initialize-packages 'auto
               flycheck-check-syntax-automatically '(save new-line)))
    #+END_SRC

**** Company Mode

    Add autocompletion for all nodes.

    #+BEGIN_SRC emacs-lisp
    (use-package company
       :ensure t
       :hook ((prog-mode latex-mode LaTeX-mode cider-repl-mode) . company-mode))
    #+END_SRC

**** Buffer Move

    Exchange buffers between split windows faster. Bound to C-w e-? for Window - Exchange.

    #+BEGIN_SRC emacs-lisp
    (use-package buffer-move
       :ensure t)
    #+END_SRC

*** Project Tools

**** Helm

    #+BEGIN_SRC emacs-lisp
    (use-package helm
       :ensure t
       :bind (("M-x" . helm-M-x)
              ("C-x C-f" . helm-find-files)
              ("C-x b" . helm-buffers-list)
              ("C-x C-b" . helm-filtered-bookmarks))
       :config
       (helm-autoresize-mode t))
    #+END_SRC

**** Projectile

    #+BEGIN_SRC emacs-lisp
    (use-package projectile
       :ensure t
       :init
       (setq projectile-enable-caching t)
       :config
       (projectile-mode))
    #+END_SRC

**** Magit Status

    #+BEGIN_SRC emacs-lisp
    (use-package magit
       :ensure t
       :bind ("C-x g" . magit-status))
    #+END_SRC

**** Diff HL Mode

     Show changes in repo in the buffer.

     #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
        :ensure t
        :config
        (global-diff-hl-mode)
        (diff-hl-flydiff-mode)
        (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
     #+END_SRC

*** Debugging

**** RealGUD

     For debugging interactively in Emacs.
     NOTE: requires a binary `ipdb` to exist in path that calls =python -m ipdb=
     NOTE: Still in development.

     #+BEGIN_SRC emacs-lisp
       (use-package realgud
         :ensure t
         :config
         (setq realgud:pdb-command-name "python -m pdb")
         (setq realgud:ipdb-command-name "python -m ipdb"))
     #+END_SRC

*** Python

**** Elpy

    #+BEGIN_SRC emacs-lisp
    (use-package elpy
       :ensure t
       :config
       (elpy-enable)
       (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt"
          elpy-rpc-backend "jedi")
       (pyvenv-workon "+")
       (setq elpy-modules
          '(elpy-module-sane-defaults
            elpy-module-company
            elpy-module-eldoc
            elpy-module-pyvenv
            elpy-module-yasnippet
            elpy-module-django)))
    #+END_SRC

**** Jedi

     Better Autocomplete and static code analysis with jedi

     #+BEGIN_SRC emacs-lisp
     (use-package jedi-core
        :ensure t)
     #+END_SRC

**** Company Jedi


     #+BEGIN_SRC emacs-lisp
       (use-package company-jedi
         :ensure t
         :config
         (setq jedi:environment-virtualenv (list (expand-file-name "~/.virtualenvs")))
         (add-hook 'python-mode-hook 'jedi:setup)
         (setq jedi:complete-on-dot t)
         (setq jedi:use-shortcuts t)
         (defun config/enable-company-jedi ()
            (add-to-list 'company-backends 'company-jedi))
         (add-hook 'python-mode-hook 'config/enable-company-jedi))
     #+END_SRC

**** Import Magic

     Manages imports for you on C-c C-l to prevent import errors.

     #+BEGIN_SRC emacs-lisp
       (use-package importmagic
          :ensure t
          :hook (python-mode . importmagic-mode))
     #+END_SRC

**** autopep8

     Automatically apply proper python coding standards on save, if not already.

    #+BEGIN_SRC emacs-lisp
    (use-package py-autopep8
       :ensure t
       :hook (python-mode . py-autopep8-enable-on-save))
    #+END_SRC

**** Sphinx Doc

     Add sphinx documentations to function headers.

     #+BEGIN_SRC emacs-lisp
     (use-package sphinx-doc
        :ensure t
        :hook (python-mode . sphinx-doc-mode))
     #+END_SRC

*** Clojure

**** Clojure-Mode

     #+BEGIN_SRC emacs-lisp
            (use-package clojure-mode
               :ensure t
               :hook ((clojure-mode . electric-pair-mode))
               :mode (("\\.clj\\'" . clojure-mode)
                      ("\\.edn\\'" . clojure-mode))
               :config
               (setq clojure-align-forms-automatically t)
               (setq clojure-indent-style 'align-arguments)
               (define-clojure-indent
                 (-> 1)
                 (->> 1)))
     #+END_SRC

**** Cider

     #+BEGIN_SRC emacs-lisp
     (use-package cider
        :ensure t
        :defer t
        :after (clojure-mode)
        :config
        (setq nrepl-log-messages t)
        :bind ("C-c C-c" . cider-jack-in))
     #+END_SRC

**** Lipsyville

     #+BEGIN_SRC emacs-lisp
       (use-package lispyville
         :hook ((clojure-mode lispy-mode cider-repl-mode) . lispyville-mode)
         :custom
         (lispyville-key-theme '(operators
                                 (escape insert)
                                 (additional-movement normal visual motion)
                                 slurp/barf-cp))
         :config
         (setq lispyville-barf-stay-with-closing t))
     #+END_SRC

*** YAML

    #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
        :ensure t
        :mode (("\\.yaml\\'" . yaml-mode)
               ("\\.yml'" . yaml-mode)))
    #+END_SRC

*** Latex

**** TODO Have latex automatically refresh pdf buffer on save.

**** RefTex

     #+BEGIN_SRC emacs-lisp
       (use-package reftex
         :ensure t
         :defer t
         :config
         (setq reftex-cite-prompt-optional-args t)); Prompt for empty optional arguments in cite
     #+END_SRC

**** Auctex

     #+BEGIN_SRC emacs-lisp
       ; See https://nasseralkmim.github.io/notes/2016/08/21/my-latex-environment/
       (use-package latex
         :ensure auctex
         :mode ("\\.tex\\'" . LaTeX-mode)
         :after (:all reftex)
         :init
         (setq TeX-source-correlate-method 'synctex)
         :hook ((latex-mode LaTeX-mode) . Tex-source-correlate-mode)
         :config
         (setq TeX-auto-save t)
         (setq TeX-parse-self t)
         (setq-default TeX-master nil)
         ;; Update PDF buffers after successful LaTeX runs
         (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'TeX-revert-document-buffer)
         ;; to use pdfview with auctex
         (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
               TeX-source-correlate-start-server t)
         (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))
     #+END_SRC

**** Company Auctex

     Autocompletions for latex.

     #+BEGIN_SRC emacs-lisp
       (use-package company-auctex
         :ensure t
         :after (:all company latex)
         :hook ((latex-mode LaTeX-mode) . company-auctex-init))
     #+END_SRC

**** Magic Latex Buffer

     Pretty latex for easier editing.

     #+BEGIN_SRC emacs-lisp
       (use-package magic-latex-buffer
         :ensure t
         :hook ((latex-mode LaTeX-mode) . 'magic-latex-buffer)
         :config
         (setq magic-latex-enable-block-highlight t
               magic-latex-enable-suscript        t
               magic-latex-enable-pretty-symbols  t
               magic-latex-enable-block-align     t
               magic-latex-enable-inline-image    t
               magic-latex-enable-minibuffer-echo t))
     #+END_SRC

**** PDF Tools

     #+BEGIN_SRC emacs-lisp
      (use-package pdf-tools
         :ensure t
         :defer t
         :magic ("%PDF" . pdf-view-mode)
         :config
         (pdf-tools-install)
         (setq mouse-wheel-follow-mouse t)
         (setq pdf-view-display-size 'fit-page)
         :bind ("C-c C-g" . pdf-sync-forward-search))
     #+END_SRC

**** Org Pdf View

    #+BEGIN_SRC emacs-lisp
    (use-package org-pdfview
       :ensure t
       :after pdf-tools)
    #+END_SRC

**** Company bib

     Autocompletions in bibtex files

     #+BEGIN_SRC emacs-lisp
     (use-package company-bibtex
        :ensure t
        :after (:all company latex)
        :config
        (add-to-list 'company-backends 'company-bibtex))
     #+END_SRC

*** Docker

**** Dockerfile Mode

     Syntax highilighting and building from Emacs.

     #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
        :ensure t
        :mode ("Dockerfile\\'" . dockerfile-mode))
     #+END_SRC

*** JSON

**** JSON Mode

     Syntax highlighting for json files. Hopefully lighter weight than javascript mode.

     #+BEGIN_SRC emacs-lisp
     (use-package json-mode
        :ensure t
        :mode ("\\.json\\'" . json-mode))
     #+END_SRC

**** JSON Snatcher

     Get keys to reach location of any arbitrary point in file.

     #+BEGIN_SRC emacs-lisp
     (use-package json-snatcher
        :ensure t
        :after (json-mode))
     #+END_SRC

*** CTFs

**** TODO - in order to get into view mode you have to run M-x x509-view<FILETYPE> while in x509 mode.
***** Figure out how to do this automatically.

    #+BEGIN_SRC emacs-lisp
    (use-package x509-mode
       :ensure t
       :mode (("\\.crl\\'" . x509-mode)
              ("\\.crt\\'" . x509-mode)
              ("\\.asn.1\\'" . x509-mode)
              ("\\.key\\'" . x509-mode)
              ("\\.dh\\'" . x509-mode))
       :config
       (setq x509-openssl-cmd "openssl"))
    #+END_SRC

** Evil.

*** Setup evil mode because VIM bindings are better.

    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :ensure t
        :config
        (evil-mode t)
        (define-key evil-window-map (kbd "H") 'buf-move-left)
        (define-key evil-window-map (kbd "J") 'buf-move-down)
        (define-key evil-window-map (kbd "K") 'buf-move-up)
        (define-key evil-window-map (kbd "L") 'buf-move-right))
    #+END_SRC

*** Evil Leader

    For fast keyboard shortcuts for common commands.

    #+BEGIN_SRC emacs-lisp
    (use-package evil-leader
       :ensure t
       :init
       (global-evil-leader-mode)
       :after (evil)
       :config
       (evil-leader/set-key
          "k" 'kill-buffer
          "g" 'magit-status
          "<up>" 'evil-numbers/inc-at-pt
          "<down>" 'evil-numbers/dec-at-pt
          "<left>" 'evil-window-left
          "<right>" 'evil-window-right
          "l"       'fc-eval-and-replace) ; See Utility Functions section
       (evil-leader/set-leader "<SPC>"))
    #+END_SRC

*** Evil Commentary

    #+BEGIN_SRC emacs-lisp
    (use-package evil-commentary
       :ensure t
       :after (evil)
       :config
       (evil-commentary-mode))
    #+END_SRC

*** Evil Surround

    Vim commands for dealing with surrounding characters.

    #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
       :ensure t
       :after (evil)
       :init
       (global-evil-surround-mode t))
    #+END_SRC

*** Relative Line Numbers

    Relative line numbering for easy navigation with vim shortcuts.

    #+BEGIN_SRC emacs-lisp
    (use-package linum-relative
       :ensure t
       :after (evil)
       :config
       (add-hook 'prog-mode-hook 'linum-on)
       (set-face-foreground 'linum "#999")
       (linum-relative-mode))
    #+END_SRC

** Sane Defaults

   Use default customization values that are more sane.

   #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t     ; No splash screen
       initial-scratch-message nil      ; Clean scratch buffer
       echo-keystrokes 0.1              ; Show keystrokes asap
       auto-revert-interval 1           ; Refresh buffers fast
       custom-file (make-temp-file "")  ; Discard customization's
       dired-dwim-target t              ; Make dired more intelligent
       default-input-method "TeX"       ; Use TeX when toggling input method
       ring-bell-function 'ignore       ; Quiet
       sentence-end-double-space nil)   ; No double space
   #+END_SRC

   Use standard keys to zoom in and out.

   #+BEGIN_SRC emacs-lisp
   (define-key global-map (kbd "C-=") 'text-scale-increase)
   (define-key global-map (kbd "C--") 'text-scale-decrease)
   #+END_SRC

   Use C-x O to move backwards through buffers (match TMUX)

   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x O") (lambda ()
                                (interactive)
                                (other-window -1 t)))
   #+END_SRC

   Some customizations must be done with =setq-default= because they are
   buffer-local.

   #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil ; Use spaces instead of tabs
       split-width-threshold 160       ; Split vertically by default
       split-height-threshold nil)     ; Split vertically by default
   #+END_SRC

   Enable hide-show in program buffers.

   #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 'hs-minor-mode)
   #+END_SRC

   Disable some of the default modes that aren't very useful.

   #+BEGIN_SRC emacs-lisp
    (dolist (mode
       '(tool-bar-mode        ; No toolbars
          menu-bar-mode       ; No menu bar
          scroll-bar-mode     ; No scroll bars
          blink-cursor-mode)) ; No blinking cursor
       (funcall mode 0))
   #+END_SRC

   Enable modes that are disabled by default.

   #+BEGIN_SRC emacs-lisp
    (dolist (mode
       '(column-number-mode     ; Show column number in mode line
          delete-selection-mode ; Replace selected text
          show-paren-mode       ; Highlight matching parentheses
          winner-mode))         ; Allow undo/redo on window operations
       (funcall mode 1))
   #+END_SRC

   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
    (set-language-environment "UTF-8")
   #+END_SRC

   Yes/no is so verbose. Answer questions with y/n.

   #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Don't allow trailing whitespace to end up in a saved file.

   #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Utility Functions

*** Eval in Place

    Enables in place evaluations of lisp code. Useful for calculations in document.

    #+BEGIN_SRC emacs-lisp
      (defun fc-eval-and-replace ()
        "Replace the preceding sexp with its value."
        (interactive)
        (kill-sexp)
        (prin1 (eval (read (current-kill 0)))
               (current-buffer)))
    #+END_SRC

** Visual

   Prettier, more configurable status bar.

   #+BEGIN_SRC emacs-lisp
    (use-package powerline
       :ensure t
       :config
       (add-hook 'after-init-hook 'powerline-center-evil-theme))
   #+END_SRC

   Set the default font.

   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil
      :family "Source Code Pro"
      :height 140
      :weight 'normal
      :width 'normal)
   #+END_SRC

   Use a Nord theme.

   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
      :ensure t
      :preface
      (defvar region-fg nil)
      :config
      (load-theme 'doom-nord t)
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))
   #+END_SRC
